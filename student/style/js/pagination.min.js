/*
 * الكود ده عبارة عن بلاجن jQuery لعمل pagination (تقسيم الصفحات) بطريقة بسيطة وقابلة للتخصيص.
 */

(function(global, $) {

    // التحقق من وجود jQuery، لو مش موجود هيطلّع خطأ
    if (typeof $ === 'undefined') {
        throwError('Pagination requires jQuery.');
    }

    // اسم البلاجن الأساسي
    var pluginName = 'pagination';

    // اسم الدالة اللي بتستخدم لإضافة هوكس (Hooks) للبلاجن
    var pluginHookMethod = 'addHook';

    // بادئة الأحداث الخاصة بالبلاجن
    var eventPrefix = '__pagination-';

    // لو فيه تعارض في اسم البلاجن (pagination موجود بالفعل)، هيستخدم اسم بديل
    if ($.fn.pagination) {
        pluginName = 'pagination2';
    }

    // الدالة الرئيسية للبلاجن، بتاخد الخيارات (options) كمدخل
    $.fn[pluginName] = function(options) {

        // لو مفيش خيارات مدخلة، هيرجع الكائن نفسه من غير تغيير
        if (typeof options === 'undefined') {
            return this;
        }

        // الكونتينر اللي هيحتوي عنصر الـ pagination
        var container = $(this);

        // دمج الخيارات الافتراضية مع الخيارات اللي المستخدم دخّلها
        var attributes = $.extend({}, $.fn[pluginName].defaults, options);

        // الكائن الرئيسي للبلاجن، فيه كل الدوال اللي بتتحكم في الـ pagination
        var pagination = {

            // دالة التهيئة: بتبدأ البلاجن وتجهّز العناصر
            initialize: function() {
                var self = this;

                // تخزين بيانات الـ pagination في الكونتينر لو مكانتش موجودة
                if (!container.data('pagination')) {
                    container.data('pagination', {});
                }

                // استدعاء هوك beforeInit، لو رجّع false هيوقّف التهيئة
                if (self.callHook('beforeInit') === false) return;

                // لو الـ pagination تم تهيئته قبل كده، هيحذف العناصر القديمة
                if (container.data('pagination').initialized) {
                    $('.paginationjs', container).remove();
                }

                // تحديد حالة التعطيل بناءً على الخيارات
                self.disabled = !!attributes.disabled;

                // إنشاء موديل يحتوي على بيانات الصفحات (عدد الصفحات المعروضة وحجم الصفحة)
                var model = self.model = {
                    pageRange: attributes.pageRange,
                    pageSize: attributes.pageSize
                };

                // تحليل مصدر البيانات (dataSource) لتحديد نوعه ومعالجته
                self.parseDataSource(attributes.dataSource, function(dataSource) {

                    // التحقق إذا كان مصدر البيانات ديناميكي (string يعني URL)
                    self.isAsync = Helpers.isString(dataSource);
                    if (Helpers.isArray(dataSource)) {
                        model.totalNumber = attributes.totalNumber = dataSource.length;
                    }

                    // التحقق إذا كان العدد الكلي للبيانات ديناميكي (بيتم جلب العدد من API)
                    self.isDynamicTotalNumber = self.isAsync && attributes.totalNumberLocator;

                    // إنشاء عنصر الـ pagination وتجهيزه
                    var el = self.render(true);

                    // إضافة كلاس إضافي لعنصر الـ pagination لو المستخدم حدده
                    if (attributes.className) {
                        el.addClass(attributes.className);
                    }

                    // تخزين العنصر في الموديل
                    model.el = el;

                    // إضافة عنصر الـ pagination للكونتينر (في الأعلى أو الأسفل حسب الخيارات)
                    container[attributes.position === 'bottom' ? 'append' : 'prepend'](el);

                    // ربط الأحداث (مثل الضغط على أزرار التنقل)
                    self.observer();

                    // تحديد إن الـ pagination تم تهيئته
                    container.data('pagination').initialized = true;

                    // استدعاء هوك afterInit بعد التهيئة
                    self.callHook('afterInit', el);
                });
            },

            // دالة لعرض عنصر الـ pagination ورسم الصفحات
            render: function(isBoot) {
                var self = this;
                var model = self.model;
                // إنشاء عنصر div جديد لو مفيش عنصر موجود
                var el = model.el || $('<div class="paginationjs"></div>');
                var isForced = isBoot !== true;

                // استدعاء هوك beforeRender قبل العرض
                self.callHook('beforeRender', isForced);

                // تحديد الصفحة الحالية وعدد الصفحات المعروضة على الجانبين
                var currentPage = model.pageNumber || attributes.pageNumber;
                var pageRange = attributes.pageRange || 0;
                var totalPage = self.getTotalPage();

                // حساب نطاق الصفحات المعروضة (بداية ونهاية)
                var rangeStart = currentPage - pageRange;
                var rangeEnd = currentPage + pageRange;

                // تعديل النطاق لو النهاية أكبر من إجمالي الصفحات
                if (rangeEnd > totalPage) {
                    rangeEnd = totalPage;
                    rangeStart = totalPage - pageRange * 2;
                    rangeStart = rangeStart < 1 ? 1 : rangeStart;
                }

                // تعديل النطاق لو البداية أقل من 1
                if (rangeStart <= 1) {
                    rangeStart = 1;
                    rangeEnd = Math.min(pageRange * 2 + 1, totalPage);
                }

                // إنشاء HTML للصفحات وإضافته للعنصر
                el.html(self.generateHTML({
                    currentPage: currentPage,
                    pageRange: pageRange,
                    rangeStart: rangeStart,
                    rangeEnd: rangeEnd
                }));

                // إخفاء الـ pagination لو فيه صفحة واحدة فقط وتم تفعيل هذا الخيار
                if (attributes.hideWhenLessThanOnePage) {
                    el[totalPage <= 1 ? 'hide' : 'show']();
                }

                // استدعاء هوك afterRender بعد العرض
                self.callHook('afterRender', isForced);

                return el;
            },

            // دالة لإنشاء HTML لأرقام الصفحات
            generatePageNumbersHTML: function(args) {
                var self = this;
                var currentPage = args.currentPage;
                var totalPage = self.getTotalPage();
                var rangeStart = args.rangeStart;
                var rangeEnd = args.rangeEnd;
                var html = '';
                var i;

                var pageLink = attributes.pageLink;
                var ellipsisText = attributes.ellipsisText;

                var classPrefix = attributes.classPrefix;
                var activeClassName = attributes.activeClassName;
                var disableClassName = attributes.disableClassName;

                // لو مفيش نطاق محدد للصفحات، هيعرض كل الصفحات
                if (attributes.pageRange === null) {
                    for (i = 1; i <= totalPage; i++) {
                        if (i == currentPage) {
                            html += '<li class="' + classPrefix + '-page J-paginationjs-page ' + activeClassName + '" data-num="' + i + '"><a>' + i + '<\/a><\/li>';
                        } else {
                            html += '<li class="' + classPrefix + '-page J-paginationjs-page" data-num="' + i + '"><a href="' + pageLink + '">' + i + '<\/a><\/li>';
                        }
                    }
                    return html;
                }

                // لو البداية أقل من أو تساوي 3، هيعرض الصفحات من 1 لبداية النطاق
                if (rangeStart <= 3) {
                    for (i = 1; i < rangeStart; i++) {
                        if (i == currentPage) {
                            html += '<li class="' + classPrefix + '-page J-paginationjs-page ' + activeClassName + '" data-num="' + i + '"><a>' + i + '<\/a><\/li>';
                        } else {
                            html += '<li class="' + classPrefix + '-page J-paginationjs-page" data-num="' + i + '"><a href="' + pageLink + '">' + i + '<\/a><\/li>';
                        }
                    }
                } else {
                    // لو النطاق بعيد عن البداية، هيعرض الصفحة الأولى (اختياري) مع فاصل (ellipsis)
                    if (attributes.showFirstOnEllipsisShow) {
                        html += '<li class="' + classPrefix + '-page ' + classPrefix + '-first J-paginationjs-page" data-num="1"><a href="' + pageLink + '">1<\/a><\/li>';
                    }
                    html += '<li class="' + classPrefix + '-ellipsis ' + disableClassName + '"><a>' + ellipsisText + '<\/a><\/li>';
                }

                // عرض الصفحات في النطاق المحدد
                for (i = rangeStart; i <= rangeEnd; i++) {
                    if (i == currentPage) {
                        html += '<li class="' + classPrefix + '-page J-paginationjs-page ' + activeClassName + '" data-num="' + i + '"><a>' + i + '<\/a><\/li>';
                    } else {
                        html += '<li class="' + classPrefix + '-page J-paginationjs-page" data-num="' + i + '"><a href="' + pageLink + '">' + i + '<\/a><\/li>';
                    }
                }

                // لو النهاية قريبة من آخر صفحة، هيعرض باقي الصفحات
                if (rangeEnd >= totalPage - 2) {
                    for (i = rangeEnd + 1; i <= totalPage; i++) {
                        html += '<li class="' + classPrefix + '-page J-paginationjs-page" data-num="' + i + '"><a href="' + pageLink + '">' + i + '<\/a><\/li>';
                    }
                } else {
                    // لو النهاية بعيدة عن آخر صفحة، هيعرض فاصل (ellipsis) وآخر صفحة (اختياري)
                    html += '<li class="' + classPrefix + '-ellipsis ' + disableClassName + '"><a>' + ellipsisText + '<\/a><\/li>';

                    if (attributes.showLastOnEllipsisShow) {
                        html += '<li class="' + classPrefix + '-page ' + classPrefix + '-last J-paginationjs-page" data-num="' + totalPage + '"><a href="' + pageLink + '">' + totalPage + '<\/a><\/li>';
                    }
                }

                return html;
            },

            // دالة لإنشاء HTML الكلي بناءً على القالب
            generateHTML: function(args) {
                var self = this;
                var currentPage = args.currentPage;
                var totalPage = self.getTotalPage();

                var totalNumber = self.getTotalNumber();

                // تحديد إذا كان هيعرض أزرار "السابق" و"التالي" وأرقام الصفحات
                var showPrevious = attributes.showPrevious;
                var showNext = attributes.showNext;
                var showPageNumbers = attributes.showPageNumbers;
                var showNavigator = attributes.showNavigator;
                var showGoInput = attributes.showGoInput;
                var showGoButton = attributes.showGoButton;

                var pageLink = attributes.pageLink;
                var prevText = attributes.prevText;
                var nextText = attributes.nextText;
                var goButtonText = attributes.goButtonText;

                var classPrefix = attributes.classPrefix;
                var disableClassName = attributes.disableClassName;
                var ulClassName = attributes.ulClassName;

                var html = '';
                var goInput = '<input type="text" class="J-paginationjs-go-pagenumber">';
                var goButton = '<input type="button" class="J-paginationjs-go-button" value="' + goButtonText + '">';
                var formattedString;

                // تحديد النصوص اللي هتظهر في الـ navigator وزر Go بناءً على الخيارات
                var formatNavigator = $.isFunction(attributes.formatNavigator) ? attributes.formatNavigator(currentPage, totalPage, totalNumber) : attributes.formatNavigator;
                var formatGoInput = $.isFunction(attributes.formatGoInput) ? attributes.formatGoInput(goInput, currentPage, totalPage, totalNumber) : attributes.formatGoInput;
                var formatGoButton = $.isFunction(attributes.formatGoButton) ? attributes.formatGoButton(goButton, currentPage, totalPage, totalNumber) : attributes.formatGoButton;

                var autoHidePrevious = $.isFunction(attributes.autoHidePrevious) ? attributes.autoHidePrevious() : attributes.autoHidePrevious;
                var autoHideNext = $.isFunction(attributes.autoHideNext) ? attributes.autoHideNext() : attributes.autoHideNext;

                var header = $.isFunction(attributes.header) ? attributes.header(currentPage, totalPage, totalNumber) : attributes.header;
                var footer = $.isFunction(attributes.footer) ? attributes.footer(currentPage, totalPage, totalNumber) : attributes.footer;

                // عرض الهيدر لو موجود
                if (header) {
                    formattedString = self.replaceVariables(header, {
                        currentPage: currentPage,
                        totalPage: totalPage,
                        totalNumber: totalNumber
                    });
                    html += formattedString;
                }

                // عرض أزرار التنقل وأرقام الصفحات لو مفعلة
                if (showPrevious || showPageNumbers || showNext) {
                    html += '<div class="paginationjs-pages">';

                    if (ulClassName) {
                        html += '<ul class="' + ulClassName + '">';
                    } else {
                        html += '<ul>';
                    }

                    // عرض زر "السابق"
                    if (showPrevious) {
                        if (currentPage <= 1) {
                            if (!autoHidePrevious) {
                                html += '<li class="' + classPrefix + '-prev ' + disableClassName + '"><a>' + prevText + '<\/a><\/li>';
                            }
                        } else {
                            html += '<li class="' + classPrefix + '-prev J-paginationjs-previous" data-num="' + (currentPage - 1) + '" title="Previous page"><a href="' + pageLink + '">' + prevText + '<\/a><\/li>';
                        }
                    }

                    // عرض أرقام الصفحات
                    if (showPageNumbers) {
                        html += self.generatePageNumbersHTML(args);
                    }

                    // عرض زر "التالي"
                    if (showNext) {
                        if (currentPage >= totalPage) {
                            if (!autoHideNext) {
                                html += '<li class="' + classPrefix + '-next ' + disableClassName + '"><a>' + nextText + '<\/a><\/li>';
                            }
                        } else {
                            html += '<li class="' + classPrefix + '-next J-paginationjs-next" data-num="' + (currentPage + 1) + '" title="Next page"><a href="' + pageLink + '">' + nextText + '<\/a><\/li>';
                        }
                    }
                    html += '<\/ul><\/div>';
                }

                // عرض الـ navigator لو مفعل
                if (showNavigator) {
                    if (formatNavigator) {
                        formattedString = self.replaceVariables(formatNavigator, {
                            currentPage: currentPage,
                            totalPage: totalPage,
                            totalNumber: totalNumber
                        });
                        html += '<div class="' + classPrefix + '-nav J-paginationjs-nav">' + formattedString + '<\/div>';
                    }
                }

                // عرض حقل إدخال Go لو مفعل
                if (showGoInput) {
                    if (formatGoInput) {
                        formattedString = self.replaceVariables(formatGoInput, {
                            currentPage: currentPage,
                            totalPage: totalPage,
                            totalNumber: totalNumber,
                            input: goInput
                        });
                        html += '<div class="' + classPrefix + '-go-input">' + formattedString + '</div>';
                    }
                }

                // عرض زر Go لو مفعل
                if (showGoButton) {
                    if (formatGoButton) {
                        formattedString = self.replaceVariables(formatGoButton, {
                            currentPage: currentPage,
                            totalPage: totalPage,
                            totalNumber: totalNumber,
                            button: goButton
                        });
                        html += '<div class="' + classPrefix + '-go-button">' + formattedString + '</div>';
                    }
                }

                // عرض الفوتر لو موجود
                if (footer) {
                    formattedString = self.replaceVariables(footer, {
                        currentPage: currentPage,
                        totalPage: totalPage,
                        totalNumber: totalNumber
                    });
                    html += formattedString;
                }

                return html;
            },

            // دالة لاستخراج العدد الكلي من البيانات في وضع ديناميكي (AJAX)
            findTotalNumberFromRemoteResponse: function(response) {
                var self = this;
                self.model.totalNumber = attributes.totalNumberLocator(response);
            },

            // دالة للانتقال لرقم صفحة معين
            go: function(number, callback) {
                var self = this;
                var model = self.model;

                // لو الـ pagination معطل، هيوقّف العملية
                if (self.disabled) return;

                var pageNumber = number;
                pageNumber = parseInt(pageNumber);

                // التحقق من صحة رقم الصفحة
                if (!pageNumber || pageNumber < 1) return;

                var pageSize = attributes.pageSize;
                var totalNumber = self.getTotalNumber();
                var totalPage = self.getTotalPage();

                // لو رقم الصفحة أكبر من إجمالي الصفحات، هيوقّف
                if (totalNumber > 0) {
                    if (pageNumber > totalPage) return;
                }

                // لو الوضع مش ديناميكي، هيجيب البيانات مباشرة
                if (!self.isAsync) {
                    render(self.getDataFragment(pageNumber));
                    return;
                }

                // تحضير بيانات الطلب في الوضع الديناميكي (AJAX)
                var postData = {};
                var alias = attributes.alias || {};
                postData[alias.pageSize ? alias.pageSize : 'pageSize'] = pageSize;
                postData[alias.pageNumber ? alias.pageNumber : 'pageNumber'] = pageNumber;

                var ajaxParams = $.isFunction(attributes.ajax) ? attributes.ajax() : attributes.ajax;
                var formatAjaxParams = {
                    type: 'get',
                    cache: false,
                    data: {},
                    contentType: 'application/x-www-form-urlencoded; charset=UTF-8',
                    dataType: 'json',
                    async: true
                };

                $.extend(true, formatAjaxParams, ajaxParams);
                $.extend(formatAjaxParams.data, postData);

                formatAjaxParams.url = attributes.dataSource;
                formatAjaxParams.success = function(response) {
                    if (self.isDynamicTotalNumber) {
                        self.findTotalNumberFromRemoteResponse(response);
                    } else {
                        self.model.totalNumber = attributes.totalNumber;
                    }

                    var finalData = self.filterDataByLocator(response);
                    render(finalData);
                };
                formatAjaxParams.error = function(jqXHR, textStatus, errorThrown) {
                    attributes.formatAjaxError && attributes.formatAjaxError(jqXHR, textStatus, errorThrown);
                    self.enable();
                };

                self.disable();

                $.ajax(formatAjaxParams);

                // دالة داخلية لعرض البيانات بعد جلبها
                function render(data) {
                    if (self.callHook('beforePaging', pageNumber) === false) return false;

                    model.direction = typeof model.pageNumber === 'undefined' ? 0 : (pageNumber > model.pageNumber ? 1 : -1);

                    model.pageNumber = pageNumber;

                    self.render();

                    if (self.disabled && self.isAsync) {
                        self.enable();
                    }

                    container.data('pagination').model = model;

                    if (attributes.formatResult) {
                        var cloneData = $.extend(true, [], data);
                        if (!Helpers.isArray(data = attributes.formatResult(cloneData))) {
                            data = cloneData;
                        }
                    }

                    container.data('pagination').currentPageData = data;

                    self.doCallback(data, callback);

                    self.callHook('afterPaging', pageNumber);

                    if (pageNumber == 1) {
                        self.callHook('afterIsFirstPage');
                    }

                    if (pageNumber == self.getTotalPage()) {
                        self.callHook('afterIsLastPage');
                    }
                }
            },

            // دالة لتنفيذ الـ callback بعد جلب البيانات
            doCallback: function(data, customCallback) {
                var self = this;
                var model = self.model;

                if ($.isFunction(customCallback)) {
                    customCallback(data, model);
                } else if ($.isFunction(attributes.callback)) {
                    attributes.callback(data, model);
                }
            },

            // دالة لتدمير البلاجن وإزالته
            destroy: function() {
                if (self.callHook('beforeDestroy') === false) return;

                this.model.el.remove();
                container.off();

                $('#paginationjs-style').remove();

                self.callHook('afterDestroy');
            },

            // دالة للانتقال للصفحة السابقة
            previous: function(callback) {
                this.go(this.model.pageNumber - 1, callback);
            },

            // دالة للانتقال للصفحة التالية
            next: function(callback) {
                this.go(this.model.pageNumber + 1, callback);
            },

            // دالة لتعطيل الـ pagination
            disable: function() {
                var self = this;
                var source = self.isAsync ? 'async' : 'sync';

                if (self.callHook('beforeDisable', source) === false) return;

                self.disabled = true;
                self.model.disabled = true;

                self.callHook('afterDisable', source);
            },

            // دالة لتفعيل الـ pagination
            enable: function() {
                var self = this;
                var source = self.isAsync ? 'async' : 'sync';

                if (self.callHook('beforeEnable', source) === false) return;

                self.disabled = false;
                self.model.disabled = false;

                self.callHook('afterEnable', source);
            },

            // دالة لإعادة تحميل الصفحة الحالية
            refresh: function(callback) {
                this.go(this.model.pageNumber, callback);
            },

            // دالة لإظهار عنصر الـ pagination
            show: function() {
                var self = this;

                if (self.model.el.is(':visible')) return;

                self.model.el.show();
            },

            // دالة لإخفاء عنصر الـ pagination
            hide: function() {
                var self = this;

                if (!self.model.el.is(':visible')) return;

                self.model.el.hide();
            },

            // دالة لاستبدال المتغيرات في القوالب
            replaceVariables: function(template, variables) {
                var formattedString;

                for (var key in variables) {
                    var value = variables[key];
                    var regexp = new RegExp('<%=\\s*' + key + '\\s*%>', 'img');

                    formattedString = (formattedString || template).replace(regexp, value);
                }

                return formattedString;
            },

            // دالة لجلب جزء من البيانات بناءً على رقم الصفحة
            getDataFragment: function(number) {
                var pageSize = attributes.pageSize;
                var dataSource = attributes.dataSource;
                var totalNumber = this.getTotalNumber();

                var start = pageSize * (number - 1) + 1;
                var end = Math.min(number * pageSize, totalNumber);

                return dataSource.slice(start - 1, end);
            },

            // دالة لجلب العدد الكلي للبيانات
            getTotalNumber: function() {
                return this.model.totalNumber || attributes.totalNumber || 0;
            },

            // دالة لجلب إجمالي عدد الصفحات
            getTotalPage: function() {
                return Math.ceil(this.getTotalNumber() / attributes.pageSize);
            },

            // دالة لجلب الـ locator (المسار للبيانات في الـ API)
            getLocator: function(locator) {
                var result;

                if (typeof locator === 'string') {
                    result = locator;
                } else if ($.isFunction(locator)) {
                    result = locator();
                } else {
                    throwError('"locator" is incorrect. (String | Function)');
                }

                return result;
            },

            // دالة لتصفية البيانات بناءً على الـ locator
            filterDataByLocator: function(dataSource) {
                var locator = this.getLocator(attributes.locator);
                var filteredData;

                if (Helpers.isObject(dataSource)) {
                    try {
                        $.each(locator.split('.'), function(index, item) {
                            filteredData = (filteredData ? filteredData : dataSource)[item];
                        });
                    } catch (e) {}

                    if (!filteredData) {
                        throwError('dataSource.' + locator + ' is undefined.');
                    } else if (!Helpers.isArray(filteredData)) {
                        throwError('dataSource.' + locator + ' must be an Array.');
                    }
                }

                return filteredData || dataSource;
            },

            // دالة لتحليل مصدر البيانات
            parseDataSource: function(dataSource, callback) {
                var self = this;

                if (Helpers.isObject(dataSource)) {
                    callback(attributes.dataSource = self.filterDataByLocator(dataSource));
                } else if (Helpers.isArray(dataSource)) {
                    callback(attributes.dataSource = dataSource);
                } else if ($.isFunction(dataSource)) {
                    attributes.dataSource(function(data) {
                        if (!Helpers.isArray(data)) {
                            throwError('The parameter of "done" Function should be an Array.');
                        }
                        self.parseDataSource.call(self, data, callback);
                    });
                } else if (typeof dataSource === 'string') {
                    if (/^https?|file:/.test(dataSource)) {
                        attributes.ajaxDataType = 'jsonp';
                    }
                    callback(dataSource);
                } else {
                    throwError('Unexpected type of "dataSource".');
                }
            },

            // دالة لاستدعاء الهوكس
            callHook: function(hook) {
                var paginationData = container.data('pagination');
                var result;

                var args = Array.prototype.slice.apply(arguments);
                args.shift();

                if (attributes[hook] && $.isFunction(attributes[hook])) {
                    if (attributes[hook].apply(global, args) === false) {
                        result = false;
                    }
                }

                if (paginationData.hooks && paginationData.hooks[hook]) {
                    $.each(paginationData.hooks[hook], function(index, item) {
                        if (item.apply(global, args) === false) {
                            result = false;
                        }
                    });
                }

                return result !== false;
            },

            // دالة لربط الأحداث (مثل الضغط على أزرار التنقل)
            observer: function() {
                var self = this;
                var el = self.model.el;

                // حدث للانتقال لرقم صفحة معين
                container.on(eventPrefix + 'go', function(event, pageNumber, done) {
                    pageNumber = parseInt($.trim(pageNumber));

                    if (!pageNumber) return;

                    if (!$.isNumeric(pageNumber)) {
                        throwError('"pageNumber" is incorrect. (Number)');
                    }

                    self.go(pageNumber, done);
                });

                // حدث الضغط على زر رقم صفحة
                el.delegate('.J-paginationjs-page', 'click', function(event) {
                    var current = $(event.currentTarget);
                    var pageNumber = $.trim(current.attr('data-num'));

                    if (!pageNumber || current.hasClass(attributes.disableClassName) || current.hasClass(attributes.activeClassName)) return;

                    if (self.callHook('beforePageOnClick', event, pageNumber) === false) return false;

                    self.go(pageNumber);

                    self.callHook('afterPageOnClick', event, pageNumber);

                    if (!attributes.pageLink) return false;
                });

                // حدث الضغط على زر "السابق"
                el.delegate('.J-paginationjs-previous', 'click', function(event) {
                    var current = $(event.currentTarget);
                    var pageNumber = $.trim(current.attr('data-num'));

                    if (!pageNumber || current.hasClass(attributes.disableClassName)) return;

                    if (self.callHook('beforePreviousOnClick', event, pageNumber) === false) return false;

                    self.go(pageNumber);

                    self.callHook('afterPreviousOnClick', event, pageNumber);

                    if (!attributes.pageLink) return false;
                });

                // حدث الضغط على زر "التالي"
                el.delegate('.J-paginationjs-next', 'click', function(event) {
                    var current = $(event.currentTarget);
                    var pageNumber = $.trim(current.attr('data-num'));

                    if (!pageNumber || current.hasClass(attributes.disableClassName)) return;

                    if (self.callHook('beforeNextOnClick', event, pageNumber) === false) return false;

                    self.go(pageNumber);

                    self.callHook('afterNextOnClick', event, pageNumber);

                    if (!attributes.pageLink) return false;
                });

                // حدث الضغط على زر Go
                el.delegate('.J-paginationjs-go-button', 'click', function(event) {
                    var pageNumber = $('.J-paginationjs-go-pagenumber', el).val();

                    if (self.callHook('beforeGoButtonOnClick', event, pageNumber) === false) return false;

                    container.trigger(eventPrefix + 'go', pageNumber);

                    self.callHook('afterGoButtonOnClick', event, pageNumber);
                });

                // حدث الضغط على Enter في حقل Go
                el.delegate('.J-paginationjs-go-pagenumber', 'keyup', function(event) {
                    if (event.which === 13) {
                        var pageNumber = $(event.currentTarget).val();

                        if (self.callHook('beforeGoInputOnEnter', event, pageNumber) === false) return false;

                        container.trigger(eventPrefix + 'go', pageNumber);

                        $('.J-paginationjs-go-pagenumber', el).focus();

                        self.callHook('afterGoInputOnEnter', event, pageNumber);
                    }
                });

                // حدث للانتقال للصفحة السابقة
                container.on(eventPrefix + 'previous', function(event, done) {
                    self.previous(done);
                });

                // حدث للانتقال للصفحة التالية
                container.on(eventPrefix + 'next', function(event, done) {
                    self.next(done);
                });

                // حدث لتعطيل الـ pagination
                container.on(eventPrefix + 'disable', function() {
                    self.disable();
                });

                // حدث لتفعيل الـ pagination
                container.on(eventPrefix + 'enable', function() {
                    self.enable();
                });

                // حدث لإعادة تحميل الصفحة
                container.on(eventPrefix + 'refresh', function(event, done) {
                    self.refresh(done);
                });

                // حدث لإظهار الـ pagination
                container.on(eventPrefix + 'show', function() {
                    self.show();
                });

                // حدث لإخفاء الـ pagination
                container.on(eventPrefix + 'hide', function() {
                    self.hide();
                });

                // حدث لتدمير الـ pagination
                container.on(eventPrefix + 'destroy', function() {
                    self.destroy();
                });

                // تحديد إذا كان هيتم تحميل الصفحة الافتراضية عند التهيئة
                var validTotalPage = Math.max(self.getTotalPage(), 1)
                var defaultPageNumber = attributes.pageNumber;
                if (self.isDynamicTotalNumber) {
                    defaultPageNumber = 1;
                }
                if (attributes.triggerPagingOnInit) {
                    container.trigger(eventPrefix + 'go', Math.min(defaultPageNumber, validTotalPage));
                }
            }
        };

        // التحقق إذا كان الـ pagination تم تهيئته من قبل
        if (container.data('pagination') && container.data('pagination').initialized === true) {
            // التعامل مع الأحداث لو تم تمرير خيارات
            if ($.isNumeric(options)) {
                container.trigger.call(this, eventPrefix + 'go', options, arguments[1]);
                return this;
            } else if (typeof options === 'string') {
                var args = Array.prototype.slice.apply(arguments);
                args[0] = eventPrefix + args[0];

                switch (options) {
                    case 'previous':
                    case 'next':
                    case 'go':
                    case 'disable':
                    case 'enable':
                    case 'refresh':
                    case 'show':
                    case 'hide':
                    case 'destroy':
                        container.trigger.apply(this, args);
                        break;
                    case 'getSelectedPageNum':
                        if (container.data('pagination').model) {
                            return container.data('pagination').model.pageNumber;
                        } else {
                            return container.data('pagination').attributes.pageNumber;
                        }
                    case 'getTotalPage':
                        return Math.ceil(container.data('pagination').model.totalNumber / container.data('pagination').model.pageSize);
                    case 'getSelectedPageData':
                        return container.data('pagination').currentPageData;
                    case 'isDisabled':
                        return container.data('pagination').model.disabled === true;
                    default:
                        throwError('Unknown action: ' + options);
                }
                return this;
            } else {
                uninstallPlugin(container);
            }
        } else {
            if (!Helpers.isObject(options)) throwError('Illegal options');
        }

        // التحقق من الخيارات
        parameterChecker(attributes);

        // تشغيل التهيئة
        pagination.initialize();

        return this;
    };

    // الخيارات الافتراضية للبلاجن
    $.fn[pluginName].defaults = {
        totalNumber: 0,
        pageNumber: 1,
        pageSize: 10,
        pageRange: 2,
        showPrevious: true,
        showNext: true,
        showPageNumbers: true,
        showNavigator: false,
        showGoInput: false,
        showGoButton: false,
        pageLink: '',
        prevText: '«',
        nextText: '»',
        ellipsisText: '...',
        goButtonText: 'Go',
        classPrefix: 'paginationjs',
        activeClassName: 'active',
        disableClassName: 'disabled',
        inlineStyle: true,
        formatNavigator: '<%= currentPage %> / <%= totalPage %>',
        formatGoInput: '<%= input %>',
        formatGoButton: '<%= button %>',
        position: 'bottom',
        autoHidePrevious: false,
        autoHideNext: false,
        triggerPagingOnInit: true,
        hideWhenLessThanOnePage: false,
        showFirstOnEllipsisShow: true,
        showLastOnEllipsisShow: true,
        callback: function() {}
    };

    // دالة لتسجيل هوكس جديدة
    $.fn[pluginHookMethod] = function(hook, callback) {
        if (arguments.length < 2) {
            throwError('Missing argument.');
        }

        if (!$.isFunction(callback)) {
            throwError('callback must be a function.');
        }

        var container = $(this);
        var paginationData = container.data('pagination');

        if (!paginationData) {
            container.data('pagination', {});
            paginationData = container.data('pagination');
        }

        !paginationData.hooks && (paginationData.hooks = {});

        paginationData.hooks[hook] = paginationData.hooks[hook] || [];
        paginationData.hooks[hook].push(callback);
    };

    // دالة ثابتة لتشغيل البلاجن
    $[pluginName] = function(selector, options) {
        if (arguments.length < 2) {
            throwError('Requires two parameters.');
        }

        var container;

        if (typeof selector !== 'string' && selector instanceof jQuery) {
            container = selector;
        } else {
            container = $(selector);
        }

        if (!container.length) return;

        container.pagination(options);

        return container;
    };

    // كائن مساعد للتعامل مع الأخطاء والتحقق من البيانات
    var Helpers = {};

    // دالة لإلقاء الأخطاء
    function throwError(content) {
        throw new Error('Pagination: ' + content);
    }

    // دالة للتحقق من الخيارات
    function parameterChecker(args) {
        if (!args.dataSource) {
            throwError('"dataSource" is required.');
        }

        if (typeof args.dataSource === 'string') {
            if (args.totalNumberLocator === undefined) {
                if (args.totalNumber === undefined) {
                    throwError('"totalNumber" is required.');
                } else if (!$.isNumeric(args.totalNumber)) {
                    throwError('"totalNumber" is incorrect. (Number)');
                }
            } else {
                if (!$.isFunction(args.totalNumberLocator)) {
                    throwError('"totalNumberLocator" should be a Function.');
                }
            }
        } else if (Helpers.isObject(args.dataSource)) {
            if (typeof args.locator === 'undefined') {
                throwError('"dataSource" is an Object, please specify "locator".');
            } else if (typeof args.locator !== 'string' && !$.isFunction(args.locator)) {
                throwError('' + args.locator + ' is incorrect. (String | Function)');
            }
        }

        if (args.formatResult !== undefined && !$.isFunction(args.formatResult)) {
            throwError('"formatResult" should be a Function.');
        }
    }

    // دالة لإزالة البلاجن القديم
    function uninstallPlugin(target) {
        var events = ['go', 'previous', 'next', 'disable', 'enable', 'refresh', 'show', 'hide', 'destroy'];

        $.each(events, function(index, value) {
            target.off(eventPrefix + value);
        });

        target.data('pagination', {});

        $('.paginationjs', target).remove();
    }

    // دالة لتحديد نوع الكائن
    function getObjectType(object, tmp) {
        return ((tmp = typeof(object)) == "object" ? object == null && "null" || Object.prototype.toString.call(object).slice(8, -1) : tmp).toLowerCase();
    }

    // إضافة دوال مساعدة للتحقق من الأنواع
    $.each(['Object', 'Array', 'String'], function(index, name) {
        Helpers['is' + name] = function(object) {
            return getObjectType(object) === name.toLowerCase();
        };
    });

    // تصدير البلاجن باستخدام AMD أو CommonJS
    if (typeof define === 'function' && define.amd) {
        define(function() {
            return $;
        });
    }

})(this, window.jQuery);